#!/bin/bash -ue
# Sync ROMS from external drive
# Christian Bryn <chr.bryn@gmail.com> 2013
# Florian Mueller <contact@petrockblock.com> 2015

## config / defaults
user="USERTOBECHOSEN"

home="$(eval echo ~$user)"
rootdir="/opt/retropie"
retropie_path="$home/RetroPie"
retropie_path_roms="$retropie_path/roms"

usb_path="$UM_MOUNTPOINT/retropie"
usb_path_roms="$usb_path/roms"
usb_path_from_rp="$usb_path/configs/from_retropie"
usb_path_to_rp="$usb_path/configs/to_retropie"

declare -A path_mapping

# mapping from usb_path_to_rp/* to retropie location
path_mapping["configs"]="$rootdir/configs"

## internals
hook_name=${0##*/}

## functions
function log() {
    logger -p user.$1 -t usbmount-"$hook_name"-[$$] -- "$2"
}

## some sanity checking
if [[ -z "$UM_MOUNTPOINT" ]]; then
    log err "UM_MOUNTPOINT not set!"
    exit 0
fi

if [[ ! -d "$UM_MOUNTPOINT" ]]; then
    log err "UM_MOUNTPOINT is not a directory"
    exit 0
fi

# make sure we have something to sync from
if [[ ! -d "$usb_path" ]]; then
    exit 0
fi

# make folders for syncing
mkdir -p "$usb_path_roms" "$usb_path_from_rp" "$usb_path_to_rp"

# mirror romdir structure to external drive
log info "Attempting to create directory structure for ROMS in '$usb_path_roms' ..."
# fetch list of romdirs from current installation and mirror onto external drive
find "$retropie_path"/roms -mindepth 1 -maxdepth 1 -type d -printf "$usb_path_roms/%f\n" | xargs mkdir -p 2>/dev/null || true

log info "Syncing roms ..."
# copy ROMs from USB stick to local SD card
rsync -rtu --exclude '._*' --max-delete=-1 "$usb_path_roms/" "$retropie_path_roms/" >/dev/null 2>&1 || log err "rsync failed to sync ROMS, returned error code $?"
chown -R $user:$user "$retropie_path_roms"

log info "Syncing configs ..."
# copy configs to usb
for to in "${!path_mapping[@]}"; do
    from=${path_mapping[$to]}
    rsync -rtu --exclude '._*' --max-delete=-1 "$from/" "$usb_path_from_rp/$to/" >/dev/null 2>&1 || log err "rsync failed to sync $from/ -> $usb_path_from_rp/$to/, returned error code $?"
done

# copy configs from usb
for from in $(find "$usb_path_to_rp/" -mindepth 1 -maxdepth 1); do
    # basename
    from_bn=${from##*/}
    to=${path_mapping[$from_bn]}
    if [[ -n "$to" ]]; then
        rsync -rtu --exclude '._*' --max-delete=-1 "$from/" "$to/" >/dev/null 2>&1 || log err "rsync failed to sync $from/ -> $to/ configuration, returned error code $?"
        chown -R $user:$user "$to"
    fi
done

# unmount USB stick
umount "$UM_MOUNTPOINT"
